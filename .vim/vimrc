set nocompatible
filetype plugin indent on
let mapleader=' '
colorscheme industry

" Writing and exiting files remaps
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>z :wq<cr>

" Bracket autocomplete
inoremap {<CR> {<CR>}<esc>ko
" inoremap (<CR> (<CR>)<esc>ko
inoremap {)<CR> {<CR>})<esc>ko

" Emmet exection command mapping
imap ,, <C-y>,

" Use %% to get your current path
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/': '%%'

" Sets symbols to represent whitespace
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:␣

" Common settings
syntax on
set tabstop=2
set shiftwidth=2
set expandtab
set background=dark
set smartindent 
set autoindent
set showcmd
set incsearch

" Turns screen flash on and disables beeping
set visualbell

" Lightline dependencies
set laststatus=2
set noshowmode

" Doesn't search node_modules directory when using find
set wildignore=/**/node_modules/**

" Disable automatic comment insertion
au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Set default comments for certain filetypes
autocmd FileType html setlocal commentstring=<!--\ %s\ -->
autocmd FileType handlebars setlocal commentstring={{!--\ %s\ --}}
autocmd FileType python setlocal commentstring=#\ %s

" Custom emmet settings
" Snippets special variables: | (cursor placement), ${cursor}, ${<variable>}, ${child}, otherwise code is placed as-is
let g:user_emmet_settings = {
\  'variables': {'lang': 'en', 'name': 'foo'},
\  'javascript': {
\      'snippets' : {
\          'jq' : "\\$(function() {\n\t${cursor}${child}\n});",
\          'jq:each' : "\\$.each(arr, function(index, item)\n\t${child}\n});",
\          'fn' : "(function() {\n\t${cursor}\n})();",
\          'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\          'for': "for (let i = 0; i < |; i++) {\n\n}",
\          'for:i': "for (let i = 0; i < |; i++) {\n\n}",
\          'for:y': "for (let y = 0; y < |; y++) {\n\n}",
\          'for:p': "for (let p = 0; p < |; p++) {\n\n}",
\          'swap': "function swap(array, i, y) {\n\tlet temp = array[i];\n\tarray[i] = array[y]\n\tarray[y] = temp\n}",
\          'test': "//////////\n// |\n//\n//\n//\n//\n//////////\nconst {test} = require('./test/test.js');\ntest(fn)\n\nfunction fn() {\n\n};",
\          'rafce' : "import React from 'react'\n\nconst ${name} = () => {\n\treturn(\n\t\t<div>\n\t\t\t|\n\t\t</div>\n\t)\n}\n\nexport default ${name}"
\      },
\  },
\  'html': {
\    'default_attributes': {
\      'option': {'value': v:null},
\      'textarea': {'id': v:null, 'name': v:null, 'cols': 10, 'rows': 10},
\    },
\    'snippets': {
\      'html:5': "<!DOCTYPE html>\n"
\              ."<html lang=\"${lang}\">\n"
\              ."<head>\n"
\              ."\t<meta charset=\"${charset}\">\n"
\              ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
\              ."\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n"
\              ."\t<title></title>\n"
\              ."</head>\n"
\              ."<body>\n\t${child}|\n</body>\n"
\              ."</html>",
\    },
\  },
\}

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'sheerun/vim-polyglot'
Plug 'itchyny/lightline.vim'
Plug 'vim-syntastic/syntastic'
Plug 'mattn/emmet-vim'

call plug#end()

"syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_javascript_checkers = ['eslint']

" autocmd BufNewFile *.c 0r ~/.vim/templates/skeleton.c
" autocmd BufNewFile *.cpp 0r ~/.vim/templates/skeleton.cpp
" autocmd BufNewFile *.css 0r ~/.vim/templates/skeleton.css
" autocmd BufNewFile *.html 0r ~/.vim/templates/skeleton.html
" autocmd BufNewFile *.js 0r ~/.vim/templates/skeleton.js
